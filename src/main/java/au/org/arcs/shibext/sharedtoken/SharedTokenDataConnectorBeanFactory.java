/**
 * 
 */
package au.org.arcs.shibext.sharedtoken;

import edu.internet2.middleware.shibboleth.common.config.attribute.resolver.dataConnector.BaseDataConnectorFactoryBean;

/**
 * @author Damien Chen
 * 
 */
public class SharedTokenDataConnectorBeanFactory extends
		BaseDataConnectorFactoryBean {


	/** ID of the attribute generated by the connector. */
	private String generatedAttribute;

	/**
	 * Comma separated IDs of attributes whose first value is used when
	 * generating the sharedToken.
	 */
	private String sourceAttribute;

	/** 
	 * Salt used when computing the sharedToken. 
	 */
	private byte[] salt;

	/** 
	 * IdP identifier used when computing the sharedToken. 
	 */
	private String idpIdentifier;

	/** Whether to store the sharedToken to Ldap */
	private boolean storeLdap;

	/** {@inheritDoc} */
	@Override
	public Class getObjectType() {
		return SharedTokenDataConnector.class;
	}

	/**
	 * Gets the ID of the attribute generated by the connector.
	 * 
	 * @return ID of the attribute generated by the connector
	 */
	public String getGeneratedAttribute() {
		return generatedAttribute;
	}

	/**
	 * Sets the ID of the attribute generated by the connector.
	 * 
	 * @param id
	 *            ID of the attribute generated by the connector
	 */
	public void setGeneratedAttribute(String id) {
		generatedAttribute = id;
	}

	/**
	 * Gets the ID of the attribute whose first value is used when generating
	 * the computed ID.
	 * 
	 * @return ID of the attribute whose first value is used when generating the
	 *         computed ID
	 */
	public String getSourceAttribute() {
		return sourceAttribute;
	}

	/**
	 * Sets the ID of the attribute whose first value is used when generating
	 * the computed ID.
	 * 
	 * @param id
	 *            ID of the attribute whose first value is used when generating
	 *            the computed ID
	 */
	public void setSourceAttribute(String id) {
		this.sourceAttribute = id;
	}

	/**
	 * Gets the salt used when computing the ID.
	 * 
	 * @return salt used when computing the ID
	 */
	public byte[] getSalt() {
		return salt;
	}

	/**
	 * Sets the salt used when computing the ID.
	 * 
	 * @param salt
	 *            salt used when computing the ID
	 */
	public void setSalt(byte[] salt) {
		this.salt = salt;
	}

	/** {@inheritDoc} */
	@Override
	protected Object createInstance() throws Exception {
		SharedTokenDataConnector connector = new SharedTokenDataConnector(
				getGeneratedAttribute(), getSourceAttribute(), getSalt(),
				getStoreLdap(), getIdpIdentifier());
		populateDataConnector(connector);
		return connector;
	}

	/**
	 * @return the storeLdap
	 */
	public boolean getStoreLdap() {
		return storeLdap;
	}

	/**
	 * @param storeLdap
	 *            the storeLdap to set
	 */
	public void setStoreLdap(boolean storeLdap) {
		this.storeLdap = storeLdap;
	}

	/**
	 * @return the idpIdentifier
	 */
	public String getIdpIdentifier() {
		return idpIdentifier;
	}

	/**
	 * @param idpIdentifier the idpIdentifier to set
	 */
	public void setIdpIdentifier(String idpIdentifier) {
		this.idpIdentifier = idpIdentifier;
	}

}
