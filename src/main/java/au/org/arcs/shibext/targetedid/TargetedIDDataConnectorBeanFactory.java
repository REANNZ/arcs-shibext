/**
 * 
 */
package au.org.arcs.shibext.targetedid;

import edu.internet2.middleware.shibboleth.common.config.attribute.resolver.dataConnector.BaseDataConnectorFactoryBean;

/**
 * @author Damien Chen
 *
 */
public class TargetedIDDataConnectorBeanFactory extends
		BaseDataConnectorFactoryBean {



	/** ID of the attribute generated by the connector. */
	private String generatedAttribute;

	/**
	 * Comma separated IDs of attributes whose first value is used when
	 * generating the targetedID.
	 */
	private String sourceAttribute;

	/** Salt used when computing the targetedID. */
	private byte[] salt;


	/** {@inheritDoc} */
	public Class getObjectType() {
		return TargetedIDDataConnectorBeanFactory.class;
	}

	/**
	 * Gets the ID of the attribute generated by the connector.
	 * 
	 * @return ID of the attribute generated by the connector
	 */
	public String getGeneratedAttribute() {
		return generatedAttribute;
	}

	/**
	 * Sets the ID of the attribute generated by the connector.
	 * 
	 * @param id
	 *            ID of the attribute generated by the connector
	 */
	public void setGeneratedAttribute(String id) {
		generatedAttribute = id;
	}

	/**
	 * Gets the ID of the attribute whose first value is used when generating
	 * the targetedID
	 * 
	 * @return ID of the attribute whose first value is used when generating the
	 *         targetedID
	 */
	public String getSourceAttribute() {
		return sourceAttribute;
	}

	/**
	 * Sets the ID of the attribute whose first value is used when generating
	 * the targetedID.
	 * 
	 * @param id
	 *            ID of the attribute whose first value is used when generating
	 *            the targetedID
	 */
	public void setSourceAttribute(String id) {
		this.sourceAttribute = id;
	}

	/**
	 * Gets the salt used when computing the ID.
	 * 
	 * @return salt used when computing the ID
	 */
	public byte[] getSalt() {
		return salt;
	}

	/**
	 * Sets the salt used when computing the ID.
	 * 
	 * @param salt
	 *            salt used when computing the ID
	 */
	public void setSalt(byte[] salt) {
		this.salt = salt;
	}

	/** {@inheritDoc} */
	protected Object createInstance() throws Exception {
		TargetedIDDataConnector connector = null;
		try{
		connector = new TargetedIDDataConnector(
				getGeneratedAttribute(), getSourceAttribute(), getSalt());
		populateDataConnector(connector);
		}catch(Exception e){
			e.printStackTrace();
		}
		return connector;
	}

}
